#!/usr/bin/env node

/**
 * Use DEBUG environment variable to print debug statements to console.
 * Include const debug = require('debug')('app') in files with debug
 * statements with the file specified as dir/filename with no extension.
 */
if (process.env.NODE_ENV === 'development') {
  const fs = require('fs')
  const path = require('path')
  const moduleDirs = ['./', './routes', './lib']
  const extRegex = new RegExp(/^.*\.(js)$/, 'i')
  const debugRegex = new RegExp(/debug/, 'i')
  let moduleList = []
  moduleDirs.forEach(dir => {
    fs.readdirSync(dir).forEach(file => {
      if (extRegex.test(file)) {
        debugRegex.test(fs.readFileSync(path.join(dir, file)))
          ? moduleList.push(path.join(dir, file).replace('.js', ''))
          : null
      }
    })
  })
  process.env.DEBUG = 'bin/www,' + moduleList.join(',')
  console.log(`These modules will have debug messages printed for them: ${'\n' + process.env.DEBUG.replace(/,/g, '\n')}`)
} else {
  process.env.hasOwnProperty('DEBUG') ? delete process.env.DEBUG : null
}

/**
 * Required modules
 */
const debug = require('debug')('bin/www')
const app = require('../app')
const http = require('http')

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('listening on port' + bind)
}

/**
 * Create HTTP server.
 */
const server = http.createServer(app)
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

module.exports = server
